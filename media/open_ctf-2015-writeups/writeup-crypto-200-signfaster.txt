SignFaster Solution
by Javantea
Aug 8, 2015

Thanks to Reid who helped with signfastest finding an unexpected 200 point bug in their code.

The library four1a.py is the central part of the solution. The reason for foul naming of the class is because using this in any system is a horrible weakness and should never be used for any reason, especially not performance.
It provides fuckedRSA, a class that is able to compute Chinese Remainder Theorem quickly with an arbitrary number of prime factors.
Say you have the primes [3, 5, 7, 11, 13, 15] as your prime factors. N is 3*5*7*11*13*15 = 225225.
The decryption exponent d is computed from the encryption exponent e and phi which is a combination of the prime factors.
phi = (p-1)*(q-1)*...
In the example phi = 2*4*6*10*12*14 = 80640
Let's say that e = 31
d = inverse(e, phi)
In this case, d would be 62431, a large number compared to N.
Encryption works like this:
ciphertext = pow(plaintext, e, N)
Let's say our ciphertext is 110138.
Then the decryption occurs like:
plaintext = pow(ciphertext, d, N)
In this case plaintext = 1337.
In math notation:
plaintext = (ciphertext ^ d) mod N
This is an expensive method of decrypting (or signing which is the same operation in RSA) a piece of data.
The Chinese Remainder Theorem states that you can compute the decryption with much lower exponents (and thus faster) by splitting the decryption into multiple parts and combining.
Compute:
q_inv = Crypto.Util.number.inverse(q, p)
m_1 = pow(ct, d_P, p)
m_2 = pow(ct, d_Q, q)
h = (q_inv*(m_1-m_2)) % p
m = m_2 + h * q

The d_P for each factor can be computed as d mod (p-1) where p is factor.
The set of d_P for our example would be [1, 3, 1, 1, 7, 5].
q_inv is the inverse of q (the second prime) mod p.
The first q_inv is inverse(3, 5) = 2.

In order to save time, we choose a small d and compute a valid e from it. Since e and d are inverse, you can compute e from d.
e = Crypto.Util.number.inverse(d, phi)
The problem is that you can't just pick an aribtrary d. Many inverses of d are 1, so you filter those out and get valid (d, e) pair.
The rest is just doing that repeatedly for any number of prime factors, which is not necessary but useful for the fasterer solution.

This is the change to the client code:
In do_pubkey:
        num_cop = 20
        bits = (4096 // num_cop) + 2
        ps = [Crypto.Util.number.getPrime(bits) for i in range(num_cop)]
        N = 1
        for x in ps:
            N *= x
        #next x
        #print('e', e, len(hex(e)[2:]) * 4)
        self.v = four1a.fuckedRSA(ps, 123123123)
        print('e=', self.v.e, len(hex(self.v.e)[2:])*4)
        
        self.rsa = RSA.construct((long(N), long(self.v.e), long(self.v.d)))

In do_challenge:
        for _ in xrange(1337):
            #s = self.rsa.sign(s - 1337, None)[0]
            s = self.v.decrypt(s - 1337)


The main trouble I ran into with this is that it took minutes for the server to respond. The authors told me that this was a problem with the design and that I should wait for it.

The winning entry took about 0.7 seconds to compute.

This solution required a lot of optimization and required hours of time despite having solved an RSA-CRT problem before. For an RSA-CRT problem that doesn't have a solution posted, check out https://www.mysterytwisterc3.org/ and look for the Smartcard RSA challenge. It's deviously difficult and doesn't allow you to solve it until you understand the concepts thoroughly.

Running the solution looks kinda like this (the original was lost in the rush to solve fasterer):


python faster_two.py :: 9999
Connected
lineReceived preauth    Please burn some cpu cycles first: mBYA6mEDFtBru1vB 8589934
Doing proof of work...
sendLine     pubkey     1439090922000000875
lineReceived pubkey     Public key?
Generating RSA key...
('d = ', 1L)
('d = ', 1L)
('d = ', 41L)
('e=', 13281046532560541359423865765833070909213698244891507570315783381000671180504383822704946466802419302255416199534597798287015968184652144826741544729770616382058559494666615627668669278273834836914477147927232410707334951260434957630568452878303704888866288674353746397675246975398959874136962710117691283914394955800292198530220631002340701582772810850382569358762497789289280560480010340494857395326059256455765918245196419597684825587460341597811833616084923104517066694412332361600923374685034727329268492821352866316950732228957546613668416108450825781594998312432681938022302919040949408345736135101868780712604097416147376922163615189263628431717104918765021457278743054455309648345045770567765178002245938549421284373406797958249701847344348130890133154011380299860618263617456237589433182589909317465447743579769224341120121399179824095032426128827631977411577209826836651982973833849193908397261370219792725294733082882697146609625576203518389917505859435292519215016744599777419535850404898958353681597343398951232457492053326072728766967755669982179477719429374779158508823047991196915072874120653789001054573684827639460491922006571613452438697442963566785909125861754705506671988967686180412983482722294259368335609756097561L, 4116)
sendLine     challange  MIIEJDANBgkqhkiG9w0BAQEFAAOCBBEAMIIEDAKCAgJOVQ5YaJmM45yFLy5e73Q+qH3TAELJ1O9aEzlSgKzP7tGNoS95c+oLtOoAILoTbQSMCrbwZChgN9Dbteh9L7SLp+5WMW7POyAOA2XXokrOZXchFLJ3TO0aLKF3NF1Xmc/9B896euVw8Kjf5gaNvAXxgOVf1WqYxIfs1eB0W/qgbTwdTsLhNuFh99nWAiomUiFazQkbxBox4e0PPDrzVQpBYhQr0mgIImZ4QdCVjYwWcmtzAmQfKxB9NZj6rD9/zzAq0C6JFs6n/u47Vh+SFJChTqJzX4n1Z1WgyEqz1q/6X8lA5RwWEKXq0ufU3Y+zLprtd8AqIUpEQxJzbjJ73Tg0hyRl8U/iex7j+kM1bFoXj5m51cAe8dkQzY2GOdeC0F/CGd/rv91v2vjyZZO+ocw37iYmG+SLIFo7aYis5hujyosqMeEvCCmPBBtNiURHlWVxdP+aUqCYm6sz6DAfq1esqi3T1z0J2DE+HPdtLjFgSlR1xBtSrGj0PUue+dAIYWNe2ZkZniQXoHiZmu5pK+yJ8fncwG9nIADmP2OwBU15oUnik2bi8/untgtRaVqEoHoHzcJ9U9gbdZKJ7ZKkeFTf3k2CMdLhrgGMoC6xefRBYaJhbhocNRuTBkMoEHSruKTeh0Er+TeMy9hLoLoo8+lyeePpO1j2fgxRzZVBJX6z/4HZAoICAjGsknaAxUac06WhCqyX2VNxF5iJiAMc4rXpnxqlDI2lYUrRvDRMPYoAqfosie1snbuFmdY5sAin8+29PihmChO8VCBlX6axSKaxKfnLtP7iEPxTrqdKrrMdltP918f+RO7TkHSqoMdQTTv/ntjn2TEE6Z13SWvlSES0TnF2a9hBiqP2boIdyF4SsWBr4GKNT9zjc2H5U3nQCqHXh72II4vLWHyOQUyE9BPzP9XLHS6Grx6hl3sM7KdPhOicn/C13vZgm0fEWKynTzBepbs8l10hlFoFOYaYiZ6fWUDvmvnVyr8gdZwCB+ThbVx/gUdeOm/VuKC0EmH1u2IyoQKrBSSSLmfN0VR6lofgK+SynbIGADKQ1UzJo7pCvGV/YDLeWYJxGsaHVfevYYbNXLIjTD4G5OjWq35TjFe6FN1+KbAVAd8n60/ON7JzmpvGh6NK9cKO8jPvPEqSY86cCXRmOSpsSQeIJ7IbCjM3NCFd3zK4/SEvrbP91xvsTffT1JGquR1/xwDwExpLRLGIfg0cK2YddHweIbrV0m230qBt+vU1H+i9iqDSmCUsNm9oGKP0e6hpDqq59Bv3QgUBuprnJ6R29s8234AuRwMj7xIzqlwhIM9lC+hxZE8QBrWFI1ElJQQ13X1Xs3pQm6yuArVvg/vMJy3ilb0rp24zgaTZ+cGPnBk=
lineReceived challange  Okay, make it quick, your challange is: 9Yq1dnwaa+K8ha5AKt78xOVoQ+oARJJllMAWPGP5yL4=
('do challenge!', '9Yq1dnwaa+K8ha5AKt78xOVoQ+oARJJllMAWPGP5yL4=')
sssssssssssss
x 0.980815887451
sendLine     print      Aco5GwZ8VeYv4TKDNQYQQEFnPeTX+urhksXcI4/vIEUMwkWpLwWvQdg6F/H16ze45ule4iYcSJ4ZAfD0IRz19YQCVaf8zNAh0H+lfqbWq6+yO/fCqaja4/2cD8GG7a3HB3gOnVFbsfS9CGwYh90SCLkTFoflDI0HkmSTHDEZSHO2kgfkYedEF4ZBLbcWhLEy2PD0iME9Wbsqux/rJHsZBGKiYEdbdGhIwrTIMLU2AB+nTOzsrDgaAFuuuncB3a69fYuaV2MSOWJuGxT4mr8FjAooKj28Cx3SDDQ5tAfN0qDk9gJ9t1TjEHLG5CNYLwKa63ht9s1Eev+JE5mJh7C+9TsOBGwUkQVywIvfXMIaM5hFY6ozgA4gqCxYdIW9t+/nKhtZUvyUR04C14w2IHm8hRxtPNzmC2tFNf0bsz371SjKP6XwwPx5umGnTpo1gcWKNH47CiRFzh9Lukm3HrHnJ52AAZSOUzT6LECFPNRfq0r+YYlGZVTjBnOIK7RcAMXtGCd8F2SRk2VyhKLXg5uSG6ZZOfWHmUtMR8VR6XzP+CjG2grdeXD6pes23HKtj1HxHbAb5klitnKWUUdZ9ww554LdN0/rHs9+CardufW2yBbPNmV2MeU2xbeMOGxoW22NJtGVtOFbZFbDoJGJjZDQVZN7yzD+X8uvi/yqRob0QHfH+1n7GQ1KUKNOcI9/TQP0kCcKHxLKpKAcyNoA
lineReceived print      Solution verified sucessfully!
This is what they gave us: 'Solution verified sucessfully!'
lineReceived print      You took 0.025278 seconds.
This is what they gave us: 'You took 0.025278 seconds.'
lineReceived print      Your flag is: computation_is_easy_when_someone_else_does_the_work
This is what they gave us: 'computation_is_easy_when_someone_else_does_the_work'


